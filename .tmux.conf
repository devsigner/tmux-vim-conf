# Our .tmux.conf file

# new ssh prompt which will open in a new window
bind S command-prompt -p ssh: "new-window -n '^ %2' 'ssh %1'"

# Setting the prefix from C-b to C-a
# START:prefix
set -g prefix C-a
# END:prefix

# Free the original Ctrl-b prefix keybinding
# START:unbind
unbind C-b
# END:unbind

#setting the delay between prefix and command
# START:delay
set -sg escape-time 1
# END:delay

# Ensure that we can send Ctrl-A to other apps
# START:bind_prefix
bind C-a send-prefix
# END:bind_prefix

# Set the base index for windows to 1 instead of 0
# START:index
set -g base-index 1
# END:index

# renumber windows sequentially after closing any of them
set -g renumber-windows on

# Set the base index for panes to 1 instead of 0
# START:panes_index
setw -g pane-base-index 1
# END:panes_index

# Reload the file with Prefix r
# START:reload
bind r source-file ~/.tmux.conf \; display "Reloaded!"
# END:reload

# splitting panes
# START:panesplit
bind | split-window -h
bind - split-window -v
# END:panesplit
bind t split-window -p 15
#bind T split-window -h -p 33 \; run "tmux send-keys 'zflow.native' C-m"
bind T split-window -h -p 33
#bind C-k clear-history

# moving between panes
# START:paneselect
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R
# END:paneselect

# Quick pane selection
# START:panetoggle
bind -r C-h select-window -t :-
bind -r C-l select-window -t :+
# END:panetoggle

# Pane resizing
# START:paneresize
bind -r H resize-pane -L 2
bind -r J resize-pane -D 2
bind -r K resize-pane -U 2
bind -r L resize-pane -R 2
# END:paneresize

# mouse support - set to on if you want to use the mouse
# START:mouse
setw -g mode-mouse on
# END:mouse
set -g mouse-select-pane on
set -g mouse-resize-pane on
set -g mouse-select-window on

# Set the default terminal mode to 256color mode
# START:termcolor
set -g default-terminal "xterm-256color"
# END:termcolor

# enable activity alerts
#START:activity
setw -g monitor-activity on
set -g visual-activity on
#END:activity

# set the status line's colors
# START:statuscolor
set -g status-fg white
set -g status-bg black
# END:statuscolor

# set the color of the window list
# START:windowstatuscolor
setw -g window-status-fg cyan
setw -g window-status-bg default
setw -g window-status-attr dim
# END:windowstatuscolor

# set colors for the active window
# START:activewindowstatuscolor
setw -g window-status-current-fg white
setw -g window-status-current-bg red
setw -g window-status-current-attr bright
# END:activewindowstatuscolor

# pane colors
# START:panecolors
#set -g pane-border-fg green
#set -g pane-border-bg black
#set -g pane-active-border-fg white
#set -g pane-active-border-bg yellow
# END:panecolors

# Command / message line
# START:cmdlinecolors
set -g message-fg white
set -g message-bg black
set -g message-attr bright
# END:cmdlinecolors

###########################
# Status Bar
###########################
# # Powerline symbols: ⮂ ⮃ ⮀ ⮁ ⭤
# Status line left side
# START:statusleft
set -g status-left-length 32
set -g status-left "#[fg=colour255,bg=colour61]#h #[fg=colour61,bg=colour255]⮀#[bg=colour255,fg=black] #S #[fg=colour255,bg=default]⮀"
# END:statusleft

# Status line right side
# START:statusright
set -g status-right-length 150
set -g status-right "#(~/tmux-vim-conf/itunes-current-track-tmux.sh) #[fg=colour61]⮂#[bg=colour61,fg=colour255] #(battery -t )#[bg=colour61] #[fg=black]⮂#[bg=black,fg=colour255] %d %b %Y %Hh%M "
# END:statusright

#START:utf8
set -g status-utf8 on
#END:utf8

# Update the status bar every sixty seconds
# START:updateinterval
set -g status-interval 10
# END:updateinterval

# Center the window list
# START:centerwindowlist
set -g status-justify centre
set -g window-status-format "#[fg=white,bg=black]⮁ #I #W"
set -g window-status-current-format "#[fg=colour234,bg=colour39]⮀#[fg=colour16,g=colour39,noreverse,bold] #I ⮁ #W #[fg=colour39,bg=colour234,nobold]⮀"
# END:centerwindowlist



# enable vi keys.
# START:vikeys
setw -g mode-keys vi
# END:vikeys

# focus pane (this toggles)
# bind Up resize-pane -Z

# Log output to a text file on demand
# START:pipe-pane
bind P pipe-pane -o "cat >>~/#W.log" \; display "Toggled logging to ~/#W.log"
# END:pipe-pane

set-option -g default-command "reattach-to-user-namespace -l zsh"
# set -g default-shell /usr/local/bin/zsh

bind C-c run "tmux save-buffer - | reattach-to-user-namespace pbcopy"
bind C-v run "tmux set-buffer $(reattach-to-user-namespace pbpaste);tmux paste-buffer"

# NOTES
# prefix space will toggle layouts
# prefix { will swap panes

 # Smart pane switching with awareness of vim splits
bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys C-h) || tmux select-pane -L"
bind -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys C-j) || tmux select-pane -D"
bind -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys C-k) || tmux select-pane -U"
bind -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys C-l) || tmux select-pane -R"
#bind -n C-\ run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys 'C-\\') || tmux select-pane -l"



# allow clearing of screen in a shell
bind C-l send-keys 'C-l'

# Setup 'v' to begin selection as in Vim
#bind-key -t vi-copy v begin-selection
#bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"

# Update default binding of `Enter` to also use copy-pipe
#unbind -t vi-copy Enter
#bind-key -t vi-copy Enter copy-pipe "reattach-to-user-namespace pbcopy"
